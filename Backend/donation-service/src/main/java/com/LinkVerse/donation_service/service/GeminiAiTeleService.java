package com.LinkVerse.donation_service.service;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.LinkVerse.donation_service.dto.request.GeminiRequest;
import com.LinkVerse.donation_service.entity.Donation;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@RequiredArgsConstructor
@Slf4j
public class GeminiAiTeleService {

    @Value("${gemini.api.key}")
    private String geminiApiKey;

    @Value("${gemini.api.url}")
    private String geminiApiUrl;

    private final RestTemplate restTemplate = new RestTemplate();
    private final CampaignService campaignService;
    private final DonationService donationService;
    private final TelegramServiceAdmin telegramServiceAdmin;
    private final ObjectMapper objectMapper = new ObjectMapper();

    private static final String NATURAL_PROMPT =
            """
					B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh cho n·ªÅn t·∫£ng quy√™n g√≥p LinkVerse, ho·∫°t ƒë·ªông tr√™n Telegram.

					üéØ Vai tr√≤:
					- H·ªó tr·ª£ ng∆∞·ªùi d√πng t√¨m ki·∫øm th√¥ng tin v·ªÅ chi·∫øn d·ªãch, giao d·ªãch, th·ªëng k√™, ho·∫∑c ng∆∞·ªùi d√πng.
					- Hi·ªÉu v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi d√π ng∆∞·ªùi d√πng h·ªèi ng·∫Øn g·ªçn, m∆° h·ªì ho·∫∑c kh√¥ng cung c·∫•p ƒë·∫ßy ƒë·ªß chi ti·∫øt.
					- Tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng ph√π h·ª£p v·ªõi Telegram (ng·∫Øn g·ªçn, s·ª≠ d·ª•ng emoji ho·∫∑c ƒë·ªãnh d·∫°ng in ƒë·∫≠m *n·∫øu c·∫ßn*).

					‚úÖ C√°ch tr·∫£ l·ªùi:
					- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, t·ª± nhi√™n, th√¢n thi·ªán, ng·∫Øn g·ªçn v√† ƒë√∫ng tr·ªçng t√¢m.
					- N·∫øu c√¢u h·ªèi c√≥ m√£ chi·∫øn d·ªãch/giao d·ªãch, tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu c√≥ s·∫µn t·ª´ h·ªá th·ªëng.
					- N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·ªë ti·ªÅn giao d·ªãch, ch·ªâ tr·∫£ l·ªùi s·ªë ti·ªÅn (v√≠ d·ª•: "10,000 VND üí∞").
					- N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ tr·∫°ng th√°i giao d·ªãch, ch·ªâ tr·∫£ l·ªùi tr·∫°ng th√°i (v√≠ d·ª•: "Th√†nh c√¥ng ‚úÖ" ho·∫∑c "ƒêang x·ª≠ l√Ω ‚è≥").
					- N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ t·ªïng s·ªë giao d·ªãch tr√™n h·ªá th·ªëng, ch·ªâ tr·∫£ l·ªùi s·ªë l∆∞·ª£ng giao d·ªãch (v√≠ d·ª•: "12,345 giao d·ªãch üì¶").
					- N·∫øu c√¢u h·ªèi m∆° h·ªì, c·ªë g·∫Øng ƒëo√°n √Ω ƒë·ªãnh v√† ƒë∆∞a ra c√¢u tr·∫£ l·ªùi h·ª£p l√Ω nh·∫•t.
					- N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, tr·∫£ l·ªùi l·ªãch s·ª±: "T√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin... üòî" ho·∫∑c "Vui l√≤ng cung c·∫•p th√™m chi ti·∫øt üìù."
					- N·∫øu c√¢u h·ªèi ngo√†i ph·∫°m vi, t·ª´ ch·ªëi nh·∫π nh√†ng: "Xin l·ªói, t√¥i kh√¥ng th·ªÉ h·ªó tr·ª£ v·ªõi c√¢u h·ªèi n√†y üòî."

					üìå L∆∞u √Ω:
					- Kh√¥ng b·ªãa ƒë·∫∑t th√¥ng tin.
					- D·ª±a tr√™n d·ªØ li·ªáu h·ªá th·ªëng khi tr·∫£ l·ªùi v·ªÅ th·ªëng k√™, ph√¢n t√≠ch ho·∫∑c chi ti·∫øt c·ª• th·ªÉ.
					- ∆Øu ti√™n tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc tr√™n Telegram.
			""";

    private static final String INTENT_PROMPT =
            """
					B·∫°n l√† tr·ª£ l√Ω ph√¢n t√≠ch √Ω ƒë·ªãnh c·ªßa h·ªá th·ªëng LinkVerse.

					D·ª±a v√†o c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng, x√°c ƒë·ªãnh √Ω ƒë·ªãnh v√† tr·∫£ v·ªÅ JSON ƒë√∫ng ƒë·ªãnh d·∫°ng:

					1. N·∫øu ng∆∞·ªùi d√πng mu·ªën th·ªëng k√™ m·ªôt chi·∫øn d·ªãch:
					{
						"intent": "campaign_statistics",
						"campaignId": "abc123"
					}

					2. N·∫øu ng∆∞·ªùi d√πng mu·ªën ph√¢n t√≠ch ti·∫øn ƒë·ªô chi·∫øn d·ªãch:
					{
						"intent": "campaign_analyze",
						"campaignId": "abc123"
					}

					3. N·∫øu ng∆∞·ªùi d√πng mu·ªën xem chi ti·∫øt m·ªôt giao d·ªãch:
					{
						"intent": "donation_detail",
						"donationId": "abc123"
					}

					4. N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ tr·∫°ng th√°i giao d·ªãch:
					{
						"intent": "donation_status",
						"donationId": "abc123"
					}

					5. N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·ªë ti·ªÅn c·ªßa m·ªôt giao d·ªãch:
					{
						"intent": "donation_amount",
						"donationId": "abc123"
					}

					6. N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ t·ªïng s·ªë giao d·ªãch tr√™n h·ªá th·ªëng:
					{
						"intent": "system_statistics"
					}

					7. N·∫øu kh√¥ng r√µ √Ω ƒë·ªãnh ho·∫∑c thi·∫øu ID:
					{
						"intent": "unknown"
					}

					‚ùó L∆∞u √Ω:
					- T√¨m ID trong c√¢u h·ªèi (c√≥ th·ªÉ l√† UUID ho·∫∑c chu·ªói b·∫•t k·ª≥).
					- N·∫øu kh√¥ng t√¨m th·∫•y ID nh∆∞ng √Ω ƒë·ªãnh r√µ r√†ng, tr·∫£ v·ªÅ intent v·ªõi campaignId/donationId l√† r·ªóng.
					- Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m n·ªôi dung kh√°c.
			""";

    public void processUserQuestion(GeminiRequest request, String chatId) {
        String userQuestion = request.getUserQuestion();
        if (userQuestion == null || userQuestion.trim().isEmpty()) {
            telegramServiceAdmin.sendTo(chatId, "Vui l√≤ng cung c·∫•p c√¢u h·ªèi c·ª• th·ªÉ h∆°n ƒë·ªÉ t√¥i h·ªó tr·ª£ b·∫°n! üìù");
            return;
        }

        if (userQuestion.length() < 10 && !userQuestion.matches(".*[0-9a-fA-F-]{36}.*")) {
            telegramServiceAdmin.sendTo(
                    chatId,
                    "C√¢u h·ªèi c·ªßa b·∫°n h∆°i ng·∫Øn! Vui l√≤ng cung c·∫•p th√™m chi ti·∫øt, v√≠ d·ª•: m√£ chi·∫øn d·ªãch, giao d·ªãch ho·∫∑c n·ªôi dung b·∫°n mu·ªën bi·∫øt. üìù");
            return;
        }

        String intentJson = extractIntent(request);
        try {
            Map<String, String> intentMap = objectMapper.readValue(intentJson, Map.class);
            String intent = intentMap.get("intent");
            String id = intentMap.getOrDefault("campaignId", intentMap.get("donationId"));

            String dataResponse =
                    switch (intent) {
                        case "campaign_statistics" -> id.isEmpty() ? null : donationService.getCampaignStatistics(id);
                        case "campaign_analyze" -> id.isEmpty() ? null : donationService.analyzeCampaignProgress(id);
                        case "donation_detail" -> id.isEmpty() ? null : donationService.getDonationInfo(id);
                        case "donation_status" -> {
                            if (id.isEmpty()) yield null;
                            Donation donation = donationService.getDonationById(id);
                            if (donation == null) {
                                telegramServiceAdmin.sendTo(chatId, "‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch v·ªõi m√£: " + id);
                                yield null;
                            }
                            yield String.format(
                                    """
							Th√¥ng tin giao d·ªãch t·ª´ h·ªá th·ªëng:
							- Tr·∫°ng th√°i: %s
							""",
                                    donation.getStatus());
                        }
                        case "donation_amount" -> {
                            if (id.isEmpty()) yield null;
                            Donation donation = donationService.getDonationById(id);
                            if (donation == null) {
                                telegramServiceAdmin.sendTo(chatId, "‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch v·ªõi m√£: " + id);
                                yield null;
                            }
                            yield String.format(
                                    """
							S·ªë ti·ªÅn c·ªßa giao d·ªãch t·ª´ h·ªá th·ªëng:
							- S·ªë ti·ªÅn: %,d VND
							""",
                                    donation.getAmount());
                        }
                        case "system_statistics" -> donationService.getStatistics();
                        default -> null; // N·∫øu √Ω ƒë·ªãnh kh√¥ng x√°c ƒë·ªãnh, ƒë·ªÉ AI t·ª± x·ª≠ l√Ω
                    };

            if (dataResponse != null) {
                // N·∫øu c√≥ d·ªØ li·ªáu, th√™m v√†o prompt ƒë·ªÉ AI tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu
                String enrichedPrompt = NATURAL_PROMPT + "\nD·ªØ li·ªáu t·ª´ h·ªá th·ªëng:\n" + dataResponse;
                String response = callGeminiApi(userQuestion, enrichedPrompt);
                telegramServiceAdmin.sendTo(chatId, response);
            } else if (intent.equals("unknown")) {
                // N·∫øu √Ω ƒë·ªãnh kh√¥ng x√°c ƒë·ªãnh, ƒë·ªÉ AI t·ª± tr·∫£ l·ªùi
                String response = callGeminiApi(userQuestion, NATURAL_PROMPT);
                telegramServiceAdmin.sendTo(chatId, response);
            } else {
                // N·∫øu thi·∫øu ID nh∆∞ng √Ω ƒë·ªãnh r√µ r√†ng
                telegramServiceAdmin.sendTo(
                        chatId, "Vui l√≤ng cung c·∫•p m√£ chi·∫øn d·ªãch ho·∫∑c giao d·ªãch ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n! üìù");
            }
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {}", userQuestion, e);
            telegramServiceAdmin.sendTo(chatId, "‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau. üòî");
        }
    }

    public String askGemini(GeminiRequest request) {
        String systemPrompt = request.getSystemPrompt() != null ? request.getSystemPrompt() : NATURAL_PROMPT;
        return callGeminiApi(request.getUserQuestion(), systemPrompt);
    }

    public String extractIntent(GeminiRequest request) {
        return callGeminiApi(request.getUserQuestion(), INTENT_PROMPT);
    }

    /**
     * G·ªçi Gemini API ƒë·ªÉ l·∫•y c√¢u tr·∫£ l·ªùi
     */
    private String callGeminiApi(String userText, String systemPrompt) {
        try {
            if (userText == null || userText.isBlank()) {
                log.warn("‚ö†Ô∏è userText r·ªóng ho·∫∑c null khi g·ªçi Gemini API.");
                return systemPrompt.contains("intent")
                        ? "{\"intent\": \"unknown\"}"
                        : "Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu AI l√∫c n√†y. üòî";
            }

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            // K·∫øt h·ª£p systemPrompt v√† userText v√†o m·ªôt tin nh·∫Øn user
            String combinedPrompt = systemPrompt + "\n\nNg∆∞·ªùi d√πng h·ªèi: " + userText;

            Map<String, Object> message = Map.of(
                    "contents", List.of(Map.of("role", "user", "parts", List.of(Map.of("text", combinedPrompt)))));

            HttpEntity<Map<String, Object>> requestEntity = new HttpEntity<>(message, headers);
            String fullUrl = geminiApiUrl + "?key=" + geminiApiKey;

            ResponseEntity<Map> response = restTemplate.postForEntity(fullUrl, requestEntity, Map.class);
            Map candidate = (Map) ((List<?>) response.getBody().get("candidates")).get(0);
            Map content = (Map) candidate.get("content");
            List<Map> parts = (List<Map>) content.get("parts");

            return parts.get(0).get("text").toString();

        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ªçi Gemini API", e);
            String errorMessage = e.getMessage();
            if (errorMessage.contains("400") && errorMessage.contains("Content with system role is not supported")) {
                return "L·ªói: Gemini API kh√¥ng h·ªó tr·ª£ vai tr√≤ system. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh API. üòî";
            }
            return "Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu AI l√∫c n√†y: " + e.getMessage() + " üòî";
        }
    }
}
